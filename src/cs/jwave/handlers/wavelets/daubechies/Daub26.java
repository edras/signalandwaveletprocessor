/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub26 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub26( ) {

    _waveLength = 52;

    double[ ] scales = {
        9.493795750710592117802731381148054398461637804818126397577999e-05,
        1.650520233532988247022384885622071050555268137055829216839523e-03,
        1.309755429255850082057770240106799154079932963479202407364818e-02,
        6.227474402514960484193581705107415937690538641013309745983962e-02,
        1.950394387167700994245891508369324694703820522489789125908612e-01,
        4.132929622783563686116108686666547082846741228042232731476147e-01,
        5.736690430342222603195557147853022060758392664086633396520345e-01,
        4.391583117891662321931477565794105633815363384084590559889493e-01,
        1.774076780986685727823533562031556893226571319881417676492595e-03,
       -3.263845936917800216385340830055349953447745005769416287177497e-01,
       -1.748399612893925042664835683606584215248582345438816346170042e-01,
        1.812918323111226960705459766025430918716233584167982942044424e-01,
        1.827554095896723746537533832033286839689931924709760567945595e-01,
       -1.043239002859270439148009137202747658420968144330108510179290e-01,
       -1.479771932752544935782314546369458188243947772922980064071205e-01,
        6.982318611329236513756591683950208955110603212379412334701145e-02,
        1.064824052498086303236593797715344405836015002929319291715777e-01,
       -5.344856168148319149493577269390074213960237013099439431132086e-02,
       -6.865475960403591525454725258715351280947435823354011140858001e-02,
        4.223218579637203541206570902753288247790857760067894456114927e-02,
        3.853571597111186425832144567362328142994885395255438867968781e-02,
       -3.137811036306775484244644776337594435094096964336402798072360e-02,
       -1.776090356835818354094298625884058170354129044259951019182732e-02,
        2.073492017996382475887790073068984224515077665517103399898854e-02,
        5.829580555318887971939315747596613038479561943085291072787359e-03,
       -1.178549790619302893728624468402138072504226527540325463847390e-02,
       -5.287383992626814439198630765217969804966319971038003993984480e-04,
        5.601947239423804853206514239940474788977188460452053462770324e-03,
       -9.390582504738289646165698675070641765810790863514339205205998e-04,
       -2.145530281567620980305401403432221668847980295600748913748902e-03,
        8.383488056543616046381924054554052104937784379435436426690560e-04,
        6.161382204574344193703789012696411561214682388271673214197731e-04,
       -4.319557074261807466712901913481943478521991611607433971794602e-04,
       -1.060574748283803889966150803551837402553866816191659959347053e-04,
        1.574795238607493590547765666590811258087715699737771458390360e-04,
       -5.277795493037868976293566636015627609248847457646525246271036e-06,
       -4.109673996391477816326502438997466532822639385119090230965252e-05,
        1.074221540872195031273584409245060623104931330938273936484593e-05,
        7.000078682964986734859102495210684809643657474253921074934684e-06,
       -3.887400161856795187587790410706550576033603097954065074023128e-06,
       -4.650463220640262639231145944536092973446596027469833860001618e-07,
        7.939210633709952088373459255067360793370284788682979065122810e-07,
       -1.079004237578671411922961583845716126060658213943840375162654e-07,
       -8.904466370168590769052983362721567202750591914741016835071257e-08,
        3.407795621290730008673832107214820587991557116806912418558069e-08,
        2.169328259850323106986222296525930099935873861026310788086221e-09,
       -3.776010478532324328184043667556576385639846460337894963138621e-09,
        6.780047245828636668305808192607091517605349478677442468580825e-10,
        1.002303191046526913509281844136258004034177309673269533418644e-10,
       -5.840408185341171468465492447799819262905317576847426970757700e-11,
        9.130510016371796243923232926650252570239054815939483900056681e-12,
       -5.251871224244435037810503452564279828539007071678724285717464e-13
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
