/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub27 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub27( ) {

    _waveLength = 54;

    double[ ] scales = {
        6.687131385431931734918880680779563307675740731544063787599480e-05,
        1.205531231673213234251999812212394463872002561229330125152073e-03,
        9.952588780876619771874091297340545740163119816300838847749336e-03,
        4.945259998290488004302995584228917712171023349013386944893643e-02,
        1.629220275023933206396286389387812803673796872000118325233533e-01,
        3.671102141253898226423388094379126394383458407087000700420400e-01,
        5.538498609904800487605460395549044755068663194750017660900436e-01,
        4.934061226779989979265447084358038959373468583404767251300717e-01,
        1.028408550618229112710739475157388764479351682549490307668477e-01,
       -2.897168033145948463175311101489473923261698802610323264603418e-01,
       -2.482645819032605667810198368127693701263349361209208170092197e-01,
        1.148230195177853576326445213787661879970642975306605349249036e-01,
        2.272732884141708265275037216925482827043581894357907763081103e-01,
       -3.878641863180231062443346843661817078060143110529946543683356e-02,
       -1.780317409590085821070366277249759321269342801053489323888575e-01,
        1.579939746024048431173907799261019471878724997312653292884660e-02,
        1.311979717171553289711406975836688896451835867594492827800969e-01,
       -1.406275155580876537026622167053147161846397735962817855782362e-02,
       -9.102290652956591798241345515773322449830692586525337562864481e-02,
        1.731101826549371089085675445961947677452358872325373949295769e-02,
        5.796940573471798814748840657698008349462526768238833307489106e-02,
       -1.851249356199807710545837861298826718763077900221574749342712e-02,
       -3.273906663102087145481936428049519742538150452785563039743756e-02,
        1.614696692239566682272152627542980896527822528487665111124260e-02,
        1.566559564892457873003263983940819950829497022298967052103291e-02,
       -1.157718645897628140054089958116866381056430680879332334217267e-02,
       -5.862096345462925972966025215266179082657169806555503857975278e-03,
        6.856635609684880675273184141746359000591385833807880272568038e-03,
        1.342626877303679609082208800217479591902967766971379107017011e-03,
       -3.332854469520006162763300141047111065412307706449049389557931e-03,
        1.457529625931728587128588244152604734177322144376309490881599e-04,
        1.301177450244135139135787970279897042994109161268159963884641e-03,
       -3.418351226915427611946547437228006377896519777431057005796358e-04,
       -3.879018574101327604369144470124819695479087900682219330965466e-04,
        2.019719879690326857104208791272390315160018069955787875123234e-04,
        7.660058387068576876674274961751262847965101108848090019821555e-05,
       -7.711145517797584208411720507329584053382646435270054267102827e-05,
       -3.517483614907445391752737841583832374184046409747387149129674e-06,
        2.063442647736885318487206413360228908558806028468062177953960e-05,
       -3.901164070638425528170558032557368703418425915665413541985623e-06,
       -3.657500908187104997045760131046655906827644494899206692043298e-06,
        1.634369624725637835424610743915128591988676092276368687669255e-06,
        3.050880686251999094242671997731089918322345713516567387655763e-07,
       -3.472468147394389269364673179891460601330730511237974736379548e-07,
        3.286558968055159530983261866450459360074591641809187825408848e-08,
        4.026255052866908637178682747490340533992340623231336911661711e-08,
       -1.321332273990056558848617809101876846857728483295631388083263e-08,
       -1.309465606856955151282041809232358209226373823424148862843577e-09,
        1.521614984778521740775073159445241799352681846880808663329946e-09,
       -2.415526928011130660506395791946234018673860470542996426005750e-10,
       -4.374986224293654395069947682013996351823060759948583134078918e-11,
        2.213662088067662485181472969374945928903854605356443772873438e-11,
       -3.295790122476585807069953975043096139541415768606924980926275e-12,
        1.828188352882424933624530026056448539377272017834175009418822e-13
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
