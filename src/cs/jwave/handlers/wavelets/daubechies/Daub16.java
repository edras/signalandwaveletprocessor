/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub16 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub16( ) {

    _waveLength = 32;

    double[ ] scales = {
        3.189220925347738029769547564645958687067086750131428767875878e-03,
        3.490771432367334641030147224023020009218241430503984146140054e-02,
        1.650642834888531178991252730561134811584835002342723240213592e-01,
        4.303127228460038137403925424357684620633970478036986773924646e-01,
        6.373563320837888986319852412996030536498595940814198125967751e-01,
        4.402902568863569000390869163571679288527803035135272578789884e-01,
       -8.975108940248964285718718077442597430659247445582660149624718e-02,
       -3.270633105279177046462905675689119641757228918228812428141723e-01,
       -2.791820813302827668264519595026873204339971219174736041535479e-02,
        2.111906939471042887209680163268837900928491426167679439251042e-01,
        2.734026375271604136485245757201617965429027819507130220231500e-02,
       -1.323883055638103904500474147756493375092287817706027978798549e-01,
       -6.239722752474871765674503394120025865444656311678760990761458e-03,
        7.592423604427631582148498743941422461530405946100943351940313e-02,
       -7.588974368857737638494890864636995796586975144990925400097160e-03,
       -3.688839769173014233352666320894554314718748429706730831064068e-02,
        1.029765964095596941165000580076616900528856265803662208854147e-02,
        1.399376885982873102950451873670329726409840291727868988490100e-02,
       -6.990014563413916670284249536517288338057856199646469078115759e-03,
       -3.644279621498389932169000540933629387055333973353108668841215e-03,
        3.128023381206268831661202559854678767821471906193608117450360e-03,
        4.078969808497128362417470323406095782431952972310546715071397e-04,
       -9.410217493595675889266453953635875407754747216734480509250273e-04,
        1.142415200387223926440228099555662945839684344936472652877091e-04,
        1.747872452253381803801758637660746874986024728615399897971953e-04,
       -6.103596621410935835162369150522212811957259981965919143961722e-05,
       -1.394566898820889345199078311998401982325273569198675335408707e-05,
        1.133660866127625858758848762886536997519471068203753661757843e-05,
       -1.043571342311606501525454737262615404887478930635676471546032e-06,
       -7.363656785451205512099695719725563646585445545841663327433569e-07,
        2.308784086857545866405412732942006121306306735866655525372544e-07,
       -2.109339630100743097000572623603489906836297584591605307745349e-08
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
