/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub28 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub28( ) {

    _waveLength = 56;

    double[ ] scales = {
        4.710807775014051101066545468288837625869263629358873937759173e-05,
        8.794985159843870273564636742144073059158975665525081816488582e-04,
        7.542650377646859177160195786201116927568410621050693986450538e-03,
        3.909260811540534426092083794403768111329778710541126982205076e-02,
        1.351379142536410450770749411679708279921694061092200363031937e-01,
        3.225633612855224257318486139030596702170126503618082416187649e-01,
        5.249982316303355562348293243640252929543774162151269406404636e-01,
        5.305162934414858075256978195354516449402692654391295761050628e-01,
        2.001761440459844380384404537971725815970574972480152145882083e-01,
       -2.304989540475825257279397658067038304888129374484095837624889e-01,
       -3.013278095326417816909366061441334075444383937588485826752087e-01,
        3.285787916338710468450547883547348694255260871071954509422161e-02,
        2.458081513737595535752949960866466132239832334168533456626848e-01,
        3.690688531571127205290633425993077868843846977265847006108551e-02,
       -1.828773307329849166920408764650763092868965221608724574218473e-01,
       -4.683823374455167616514752420549419665215987106243491879971921e-02,
        1.346275679102260877490923315484152662987698625205479167761416e-01,
        3.447863127509970524678534595639646616244376966117385829345554e-02,
       -9.768535580565244174963692133038973587005628990493154911133358e-02,
       -1.734192283130589908795581592406238282930530566316914040035812e-02,
        6.774789550190933956165341752699717255041141690153626336867769e-02,
        3.448018955540951137600471926079622335842207388713342609755316e-03,
       -4.333336861608628393863254980828284403766309203453808666888800e-02,
        4.431732910062988320487418656322338284504389482966303454010563e-03,
        2.468806001015186586264188361362046240243934625858343309818244e-02,
       -6.815549764552309639259447104811254179605050667281644254737890e-03,
       -1.206359196821849005842466619530619474644989878503490321948471e-02,
        5.838816627748944864497370576838809711476027837762897602935327e-03,
        4.784863112454241718009916669120329848973107781600157214960003e-03,
       -3.725461247074254799171427871442937099025589672466088044410521e-03,
       -1.360373845639692436577650137133777929659265166644839235882291e-03,
        1.875998668202795626152766912508562385106168761893900192731562e-03,
        1.415672393140464257573780581396205840941849282748250523509874e-04,
       -7.486749559114629991320679819683227355746847370960399216568306e-04,
        1.154656063658921251969297916771881248142872975490882572741198e-04,
        2.295790982233456202366621544054366855729175050420515776344878e-04,
       -8.903901490044488099517361247378396756893227855233897357882978e-05,
       -4.907713416190250858324783990436748073854807494400738311968278e-05,
        3.641401211050802781223450761733180188911730291497201507086247e-05,
        4.638664981394294654002871426476885751050837817671843706915388e-06,
       -1.004326041333422601781848560432120920634648692782357855473103e-05,
        1.247900317574834146052381692752796047052443265982232422642017e-06,
        1.840363734517769191684379309039277810350620305330900536404818e-06,
       -6.670215479954892588747450458085225880096882699397256774967304e-07,
       -1.757461173209842779903676264971918635870906983281392939812547e-07,
        1.490660013535362170989340065033061951960933954388633507264360e-07,
       -8.262387315626556965966429243600984899650039704831080988658278e-09,
       -1.784138690875710077191713941441263246560738410213624546116655e-08,
        5.044047056383436444631252840057862002264087720676808580373667e-09,
        6.944540328946226952976704718677697525410051405055662575530111e-10,
       -6.077041247229010224760245305596307803830053533836849384680534e-10,
        8.492220011056382105461206077240377024404404638947591299761197e-11,
        1.867367263783390418963879146175452376940453585791428841004699e-11,
       -8.365490471258800799349289794397908900767054085216008197372193e-12,
        1.188850533405901520842321749021089497203940688882364518455403e-12,
       -6.367772354714857335632692092267254266368934590973693820942617e-14
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
