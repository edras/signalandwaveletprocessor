/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub22 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub22( ) {

    _waveLength = 44;

    double[ ] scales = {
        3.862632314910982158524358900615460368877852009576899680767316e-04,
        5.721854631334539120809783403484493333555361591386208129183833e-03,
        3.806993723641108494769873046391825574447727068953448390456335e-02,
        1.483675408901114285014404448710249837385836373168215616427030e-01,
        3.677286834460374788614690818452372827430535649696462720334897e-01,
        5.784327310095244271421181831735444106385099957908657145590104e-01,
        5.079010906221639018391523325390716836568713192498711562711282e-01,
        7.372450118363015165570139016530653113725172412104955350368114e-02,
       -3.127265804282961918033226222621788537078452535993545440716988e-01,
       -2.005684061048870939324361244042200174132905844868237447130382e-01,
        1.640931881067664818606223226286885712554385317412228836705888e-01,
        1.799731879928913037252154295313083168387840791424988422757762e-01,
       -9.711079840911470969274209179691733251456735137994201552926799e-02,
       -1.317681376866834107513648518146838345477875022352088357523838e-01,
        6.807631439273221556739202147004580559367442550641388181886023e-02,
        8.455737636682607503362813659356786494357635805197410905877078e-02,
       -5.136425429744413245727949984018884707909441768477091944584584e-02,
       -4.653081182750671347875833607846979997825771277976548080904423e-02,
        3.697084662069802057615318892988581825637896696876361343354380e-02,
        2.058670762756536044060249710676656807281671451609632981487139e-02,
       -2.348000134449318868560142854519364987363882333754753819791381e-02,
       -6.213782849364658499069336123807608293122900450508440420104462e-03,
        1.256472521834337406887017835495604463815382993214296088172221e-02,
        3.001373985076435951229129255588255746904937042979316054485183e-04,
       -5.455691986156717076595353163071679107868762395367234726592273e-03,
        1.044260739186025323350755659184734060807432172611689413745029e-03,
        1.827010495657279080112597436850157110235336772062961041154607e-03,
       -7.706909881231196232880372722955519781655769913634565757339739e-04,
       -4.237873998391800799531947768003976978197438302533528661825758e-04,
        3.286094142136787341983758471405935405823323072829619248523697e-04,
        4.345899904532003379046992625575076092823809665933575578710696e-05,
       -9.405223634815760421845190098352673647881298980040512091599943e-05,
        1.137434966212593172736144274866639210339820203135670505287250e-05,
        1.737375695756189356163565074505405906859746605867772002320509e-05,
       -6.166729316467578372152251668422979152169587307212708981768966e-06,
       -1.565179131995160159307426993578204733378112742579926503832095e-06,
        1.295182057318877573889711232345068147800395721925682566394936e-06,
       -8.779879873361286276888117046153049053917243760475816789226764e-08,
       -1.283336228751754417819693932114064887075096030264748079976736e-07,
        3.761228749337362366156711648187743399164239397803629022612862e-08,
        1.680171404922988885554331183691280245962290247654438114807112e-09,
       -2.729623146632976083449327361739104754443221903317745768938846e-09,
        5.335938821667489905169783227036804533253011117886586305435615e-10,
       -3.602113484339554703794807810939301847299106970237814334104274e-11
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
