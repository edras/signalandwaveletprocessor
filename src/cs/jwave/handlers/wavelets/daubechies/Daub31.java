/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub31 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub31( ) {

    _waveLength = 62;

    double[ ] scales = {
        1.648013386456140748122177817418358316441195236228590958603489e-05,
        3.394122037769956699157160165352942212213928231154233571163033e-04,
        3.236884068627721221829662672296912258338131668810067169630813e-03,
        1.885369161298591269159568944275763468999829139547989648553486e-02,
        7.433609301164788697908776495388047669378919816041031344650271e-02,
        2.070128744852353286198055444111916450619762837756134323019573e-01,
        4.091922000374278563928213235836188963704298775635493549519369e-01,
        5.511398409142754983590484577074663132074992263886810324421617e-01,
        4.294688082061372955430413148799008354573408538414331312236645e-01,
        2.716921249736946422305354732634261873401679092095992827198308e-02,
       -3.109551183195075186926560285811004715398678229333522634202008e-01,
       -2.179784855235633521693544507220105631639547435903112747133934e-01,
        1.401782887652732681656253206993073895422881511380152633441096e-01,
        2.249667114737370933697297905066886078307490136415302624018330e-01,
       -4.992634916046823977000579399730138693074543903234092797936484e-02,
       -1.869623608957154494374577196258383009208655076187653847079167e-01,
        1.543698842948893409652995335281236231845293548571166883219023e-02,
        1.450895009319931981518942907854879059128872873116921504156674e-01,
       -8.139832273469236863527708715566588550006680549152344840146851e-03,
       -1.076127733234956326668605511648013952380301953590447106075614e-01,
        1.094129745236496925725237900637802669504835743555466811796369e-02,
        7.535361174328140695528289751109133941376701984419452638686226e-02,
       -1.488002661810482202699555987503429289100801979910046913257306e-02,
       -4.861907546485433003537603385831190109391263542044516048871113e-02,
        1.615417156598591113619453864586701665635869166193865651960591e-02,
        2.804761936675616906861927211659154977049392281479113764697785e-02,
       -1.427627527776351943309800140756746087215016194775579070599004e-02,
       -1.390055293926652880755898888934447671732373519028670201124816e-02,
        1.051763948737184089128633441244991643331033825102031908858652e-02,
        5.516163573310992566561289762241160214476622662764637181816550e-03,
       -6.520852375874612553325469682628530079210293774541131381751695e-03,
       -1.428264223218909891400516038687842292177211292295049238921068e-03,
        3.393066776715931928419358796960612411097347419792355896915546e-03,
       -6.397901106014600492881202314307290077992972755016494062875201e-05,
       -1.459041741985160943114515221598080223845239255190055621901681e-03,
        3.431398296904734438118401084929505912208229684629857530009147e-04,
        4.998816175637222614896912406679513231966722440032799024979502e-04,
       -2.396583469402949615285646688069476140260781708006174912535660e-04,
       -1.243411617250228669409179807383399199879641177993453588807726e-04,
        1.089584350416766882738651833752634206358441308880869184416670e-04,
        1.501335727444532997071651937630983442758297688087711521441229e-05,
       -3.631255157860086164261313773172162991107348698083164489165837e-05,
        4.034520235184278839752741499546098778993926344831736074409765e-06,
        8.795301342692987765440618030678349427367022581211855857458220e-06,
       -3.035142365891509630069007852947057220760887215249503512783023e-06,
       -1.369060230942940782050489751987123955074404782177163471279285e-06,
        9.810015422044371573950976088058064384946146188110905321673802e-07,
        5.327250656974915426977440959783080593776012130063170688309127e-08,
       -1.975925129170206248152121156696590501303803187231928513867046e-07,
        3.616826517331004805247567218405798591329788122337274956172315e-08,
        2.328309713821409644308538888589329921141948539678106680777082e-08,
       -1.061529602150252306500404266150823962402673780484965538270541e-08,
       -6.474311687959861398702581539341954438747926255671605657095807e-10,
        1.408568151025177427076547804944585301332087108125727813194374e-09,
       -2.524043954153353306183643702933218308617979467184848456565837e-10,
       -7.348930032486263904766913919653624379586487437915175106407348e-11,
        3.692108808871129411604189196259677640440919369478263728899602e-11,
       -3.327008967125979929910636246337150851642079794871116041187279e-12,
       -1.324334917243963163878274345609465717294426628053460151843705e-12,
        4.445467096291932163298411852093011459626037560439178917611592e-13,
       -5.559442050579014337641375730083534521513818164827556763756543e-14,
        2.699382879762665647295493928801387173921314576598505507855504e-15
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
