/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub30 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub30( ) {

    _waveLength = 60;

    double[ ] scales = {
        2.338616172731421471474407279894891960011661146356580425400538e-05,
        4.666379504285509336662000111055365140848987563882199035322085e-04,
        4.300797165048069510045016757402827408493482974782286966500398e-03,
        2.413083267158837895194919987958311943976725005113561262334092e-02,
        9.123830406701570679321575555085899708564500191080751595642650e-02,
        2.420206709402140994467599658342919512318194032687898436229538e-01,
        4.504878218533178366981351802898336415314944375740699506554771e-01,
        5.575722329128364304078082520999850413492571645754785374629734e-01,
        3.662426833716279793144871151369089533016299234992584741629624e-01,
       -6.618367077593731501909741041813726474911212544474895441395148e-02,
       -3.329669750208556069196849320598850505877494561268613506392514e-01,
       -1.419685133300829310219026267403758254954270602825020111483505e-01,
        1.994621215806643032428990062111230223523226088131364328774921e-01,
        1.778298732448367361280250921330425046260289700971176750362566e-01,
       -1.145582194327077814891518778613672243404957549114393749173137e-01,
       -1.572368179599938126878197378886501553251711910617673398124611e-01,
        7.277865897036442699893544326605244235248713804556715604416632e-02,
        1.227477460450093778691578797698150091624353365248212907325446e-01,
       -5.380646545825707676022015051837304300338645984615639237930800e-02,
       -8.765869003638366048026572053699028353846982304851342479893827e-02,
        4.380166467141773250305407710250135373016604593736480428415303e-02,
        5.671236574473569492590636983030617493807140224924978946302257e-02,
       -3.567339749675960965780819743176056734137251336781389369397564e-02,
       -3.226375891935220815954913483392725682165778426411705216010280e-02,
        2.707861959529418272206848318420006522973840949600186710327776e-02,
        1.528796076985739546052896626042375110302102640936712142026221e-02,
       -1.839974386811734118728169880549148389603890445324127330811811e-02,
       -5.296859666131086629169938675330494864053932988161015674773617e-03,
        1.091563165830488927536881480211929049886878831313700460017968e-02,
        6.196717564977244383592534999284255315694546230739551683085460e-04,
       -5.530730148192003288871383856487027893918513053091795443517653e-03,
        8.433845866620933982126003584365932145598126087481400294999080e-04,
        2.324520094060099304385756339638431339131122661576649123053845e-03,
       -8.609276968110423879660725173525347077801305237644122054954659e-04,
       -7.678782504380918697963922441514742758516706160788123977340073e-04,
        5.050948239033467796256544554086554367969638627715114003635557e-04,
        1.724825842351709725545759714374272164367933578194910678479473e-04,
       -2.161718301169633804271038862087964094429005266172702380483361e-04,
       -8.548305467584070994787824796256108217987765582429940610377190e-06,
        6.982008370808327851082027193100914402221658444151889697045071e-05,
       -1.339716863293971629296314599448901465078920406443516550195793e-05,
       -1.636152478725426488654528710478856195004608401773950511915162e-05,
        7.252145535890469015723401169934327900622894130695550273452916e-06,
        2.327549098493686509557358103785598216688723737824121617676858e-06,
       -2.187267676996166416699555236143059249832615777542412142603694e-06,
        1.099474338526203304286307383463498542376432972308342428764576e-08,
        4.261662326011572446469849114416378817419458434583398455985144e-07,
       -1.000414682354500898864979332965559934104686157639553850670490e-07,
       -4.764379965139453357729154748688006975561934425368712852985388e-08,
        2.605442754977625431940885841950955928085338672381046225838880e-08,
        5.553397861397053982967618072672572206490972606026556946910028e-10,
       -3.331105680467578245901976412732595596538702049437802824373020e-09,
        6.984862691832182584221096665570313611280449991512869846064780e-10,
        1.613622978270904360610418704685783656905979134344922647926295e-10,
       -9.461387997276802120884525814092001871993910062127702293573920e-11,
        1.000105131393171192746337860330428369495110180346654025287492e-11,
        3.239428638532286114355931428908079297696045600279108835760520e-12,
       -1.185237592101582328254231496310584611948560976394420324137742e-12,
        1.543997570847620046003616417646988780670333040868954794039905e-13,
       -7.737942630954405708679963277418806436871098329050829841696327e-15
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
