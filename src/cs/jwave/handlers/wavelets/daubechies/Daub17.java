/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub17 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub17( ) {

    _waveLength = 34;

    double[ ] scales = {
        2.241807001037312853535962677074436914062191880560370733250531e-03,
        2.598539370360604338914864591720788315473944524878241294399948e-02,
        1.312149033078244065775506231859069960144293609259978530067004e-01,
        3.703507241526411504492548190721886449477078876896803823650425e-01,
        6.109966156846228181886678867679372082737093893358726291371783e-01,
        5.183157640569378393254538528085968046216817197718416402439904e-01,
        2.731497040329363500431250719147586480350469818964563003672942e-02,
       -3.283207483639617360909665340725061767581597698151558024679130e-01,
       -1.265997522158827028744679110933825505053966260104086162103728e-01,
        1.973105895650109927854047044781930142551422414135646917122284e-01,
        1.011354891774702721509699856433434802196622545499664876109437e-01,
       -1.268156917782863110948571128662331680384792185915017065732137e-01,
       -5.709141963167692728911239478651382324161160869845347053990144e-02,
        8.110598665416088507965885748555429201024364190954499194020678e-02,
        2.231233617810379595339136059534813756232242114093689244020869e-02,
       -4.692243838926973733300897059211400507138768125498030602878439e-02,
       -3.270955535819293781655360222177494452069525958061609392809275e-03,
        2.273367658394627031845616244788448969906713741338339498024864e-02,
       -3.042989981354637068592482637907206078633395457225096588287881e-03,
       -8.602921520322854831713706413243659917926736284271730611920986e-03,
        2.967996691526094872806485060008038269959463846548378995044195e-03,
        2.301205242153545624302059869038423604241976680189447476064764e-03,
       -1.436845304802976126222890402980384903503674530729935809561434e-03,
       -3.281325194098379713954444017520115075812402442728749700195651e-04,
        4.394654277686436778385677527317841632289249319738892179465910e-04,
       -2.561010956654845882729891210949920221664082061531909655178413e-05,
       -8.204803202453391839095482576282189866136273049636764338689593e-05,
        2.318681379874595084482068205706277572106695174091895338530734e-05,
        6.990600985076751273204549700855378627762758585902057964027481e-06,
       -4.505942477222988194102268206378312129713572600716499944918416e-06,
        3.016549609994557415605207594879939763476168705217646897702706e-07,
        2.957700933316856754979905258816151367870345628924317307354639e-07,
       -8.423948446002680178787071296922877068410310942222799622593133e-08,
        7.267492968561608110879767441409035034158581719789791088892046e-09
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
