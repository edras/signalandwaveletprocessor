/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub32 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub32( ) {

    _waveLength = 64;

    double[ ] scales = {
        1.161463302135014885567464100760659332951431420121048996305591e-05,
        2.466566906380903352739104211274667134470169443886449124673996e-04,
        2.431261919572266100780423071905958127811969678055971488060574e-03,
        1.468104638141913563547809006402194831107662001343421893488086e-02,
        6.025749912033537081745451975527967031851677384078997261920024e-02,
        1.757507836394388988189299915753348505208376399651864661397588e-01,
        3.675096285973496361995340339143234125206079560406868595968025e-01,
        5.343179193409538322901117858552186425529774700290587495921679e-01,
        4.778091637339484033555130814414794130354053753675509287934741e-01,
        1.206305382656178269538098710665261299391507308342013788891222e-01,
       -2.666981814766755535489784087869865024226542605534080371507405e-01,
       -2.774215815584272153338153320303401666681294506143291967655666e-01,
        6.471335480551623831000090095167664918448659157720155321560811e-02,
        2.483106423568801736064852157222867588791898170114101300999760e-01,
        2.466244483969740441701479334808723214802614938081258920635302e-02,
       -1.921023447085468984341365278247990525863123891147783426068990e-01,
       -4.899511718467173853355943225576377418394280156945986899417475e-02,
        1.452320794752866460838830744051944832326998342053148426312341e-01,
        4.440490819993974022640619534046603571086531544468421519143629e-02,
       -1.094561131160893831027722774343269232755171130623890041619420e-01,
       -2.962787250844770491204452379051215505049068645551070779367843e-02,
        8.087414063848395744090831590426327690818854671836423275412813e-02,
        1.410615151610660772869738802931740150275269382463799031013905e-02,
       -5.692631406247843550478416271158537960555270097953330567652364e-02,
       -2.380264464932573834443178362086503847328134994591954135879789e-03,
        3.705145792354468010437633458013030898015496905609424004450953e-02,
       -4.145907660827218781460700428862611061267328108653649653634276e-03,
       -2.166282283639119347634778516947485598599029367518033869601702e-02,
        6.167527310685675112579059689520105004744367282412921739811164e-03,
        1.101740071540688116532806119564345712473051769079712407908648e-02,
       -5.411568257275791208581502410752383050600045942275647685361370e-03,
       -4.649216751184411528658094984504900172989190128905887602541396e-03,
        3.627224640687864960122122984391704782343548385375321260251988e-03,
        1.468955100468467772528811782840480639166582822577191079260543e-03,
       -1.964740555821778254183647540656746450092725858126595984907304e-03,
       -2.211678729579097916278097586914956834196749138610403102772710e-04,
        8.673058518450555343925662389563539890596549655683386287799624e-04,
       -1.024537310607396186949656796812972062290796122915930356634122e-04,
       -3.059654423826911750479261161552574500739091332121504634422577e-04,
        1.053915461739828114700905192091104141076083602686374410146603e-04,
        8.103678329134838389828091896334156224227821362491626044950428e-05,
       -5.259809282684322782648914338377962890245975842272425408122506e-05,
       -1.294045779405512723950480259110995722517019870286295908085366e-05,
        1.824268401980691220603850117995712615809177092802967489081228e-05,
       -6.361781532260254953363913076575914206506177493714496098327288e-07,
       -4.558309576264423135123964145585288808181431652781253437738445e-06,
        1.202889036321620990296134494079846952404216422923750605507047e-06,
        7.560047625595947819392627283726711361273296630256477108501994e-07,
       -4.285970693151457255418342315045357407199066350632593899896712e-07,
       -5.003361868748230293692887222336390314786090450819216035110269e-08,
        8.965966311957728376981484572655177545054433542721057470726361e-08,
       -1.219924359483373093110396748985081720383992859961285213840740e-08,
       -1.104383021722648979552131128575075255513372249283096583736746e-08,
        4.250422311980592983740943309197245384991941251563471671065543e-09,
        4.384387799940474369553236949848427579687147486892033587998023e-10,
       -5.881091462634605628881794361152305108432139465417759716875076e-10,
        8.904723796221605490455387579189371137903330749397374037644960e-11,
        3.263270741332907875981844980104948375955551273115386408552080e-11,
       -1.430918765169202320188022211739750594608742928641485026836608e-11,
        1.075610653501062115165734990153347111902874668945095034791947e-12,
        5.361482229611801638107331379599434078296259332654994508124989e-13,
       -1.663800489433402369889818192962259823988673359967722467427927e-13,
        2.000715303810524954375796020597627467104635766752154321244151e-14,
       -9.421019139535078421314655362291088223782497046057523323473331e-16
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
