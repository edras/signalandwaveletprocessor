/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub24 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub24( ) {

    _waveLength = 48;

    double[ ] scales = {
        1.914358009475513695026138336474115599435172088053846745168462e-04,
        3.082081714905494436206199424544404720984720556128685270556458e-03,
        2.248233994971641072358415157184825628226776692231940577581580e-02,
        9.726223583362519663806545734008355914527504417674578571164300e-02,
        2.729089160677263268706137134412557268751671263458895098625356e-01,
        5.043710408399249919771876890402814109246866444441814540282099e-01,
        5.749392210955419968460807901923407033144945935105622912839838e-01,
        2.809855532337118833442626085115402941842959475929278883281409e-01,
       -1.872714068851562376981887159775791469060265778441667840307934e-01,
       -3.179430789993627375453948489797707550898087789160025182664299e-01,
        4.776613684344728187950198323031360866349104994035553200788631e-03,
        2.392373887803108551973268291945824822214858134512317715815616e-01,
        4.252872964148383258147364472170645232684343235486951540533893e-02,
       -1.711753513703468896897638515080572393949165942335556397917666e-01,
       -3.877717357792001620177594726199572688446488033750771020190283e-02,
        1.210163034692242362312637311149062286659377039046006801523826e-01,
        2.098011370914481534980883827326017063121637262728447783605518e-02,
       -8.216165420800166702291466006164189460916816748629968198028898e-02,
       -4.578436241819221637997516339765068825260159169893967894877272e-03,
        5.130162003998087915555334881398688958843078494595140394873884e-02,
       -4.944709428125628299815920032649550811877887219282751174798211e-03,
       -2.821310709490189098113895361900699228886900995412759197674058e-02,
        7.661721881646585897329899904308764405384658404613669817843430e-03,
        1.304997087108573583052494067883717533043101857128653233783396e-02,
       -6.291435370018187780721843581169343900864298634085743861509767e-03,
       -4.746568786323113800477796959513558401732252800905982385017245e-03,
        3.736046178282523345179052160810332868725126356493155728625572e-03,
        1.153764936839481504858282495202271984454410046682805375157566e-03,
       -1.696456818974824394274534636412116243080312601322325642741589e-03,
       -4.416184856141520063365958900079406737636243682138363561877750e-05,
        5.861270593183109933716735450272894035425792347806515678695765e-04,
       -1.181233237969554740613021227756568966806892308457221016257961e-04,
       -1.460079817762616838924301818082729036314539476811023255670666e-04,
        6.559388639305634085303738560455061974369354538271316071502698e-05,
        2.183241460466558363365044032984257709791187640963509380549307e-05,
       -2.022888292612697682860859987200455702614855595412267510558659e-05,
        1.341157750809114719319937553186023660581084151828593222893663e-08,
        3.901100338597702610409014129024223853127911530009766793352492e-06,
       -8.980253143938407724149926669980791166378388013293887718404796e-07,
       -4.032507756879971624098983247358983425236092110387724315244646e-07,
        2.166339653278574639176393978510246335478946697396400359281412e-07,
       -5.057645419792500308492508924343248979317507866520688417567606e-10,
       -2.255740388176086107368821674947175804005323153443170526520277e-08,
        5.157776789671999638950774266313208715015419699643333784626363e-09,
        4.748375824256231118094453549799175824526559994333227456737433e-10,
       -4.024658644584379774251499574468195118601698713554294941756559e-10,
        6.991801157638230974132696433509625934021677793453732225542951e-11,
       -4.342782503803710247259037552886749457951053124203814185811297e-12
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
