/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub29 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub29( ) {

    _waveLength = 58;

    double[ ] scales = {
        3.318966279841524761813546359818075441349169975922439988843475e-05,
        6.409516803044434540833706729120596322083061716935004987374676e-04,
        5.702126517773375434760843998623507494914551464968126455168657e-03,
        3.077358022140837676716707336516751814713312018344719150923618e-02,
        1.113701169517405304762186166370327770191325772342190715118617e-01,
        2.806534559709829376968881262770480606500920092398534229615289e-01,
        4.897588047621993143592705932993573539235839610055331620240518e-01,
        5.513744327583751951223746071670135992466984391233429663886536e-01,
        2.891052383358291634605691113586264061513180158354460952469246e-01,
       -1.540287344599000542466293779503370141731339982919280951230240e-01,
       -3.300409489175880520295083779487012611959310539629627124613719e-01,
       -5.570680007294085781514541931715795784309410235726214400350351e-02,
        2.361052361530259415983110734054626770649468357328362426830433e-01,
        1.124191748731883764769740670535880543076817816861518667898467e-01,
       -1.608779885941877360771615465531852333085159940159968393590303e-01,
       -1.078459499387214201077881957354707913786241153934264316589273e-01,
        1.144722958938182579734135930060053286267822797640393386903440e-01,
        8.322074716244975790297348835032537357891920536002627784941129e-02,
       -8.512549261563550232832311331420804581881235448862834507281486e-02,
       -5.502748952532572320924541450626650067707344725344841099873446e-02,
        6.347916458421186633577789314698972361081611994794140119302163e-02,
        3.053154327270413646637328212093941030592133225231728964047047e-02,
       -4.518798127778834515979704475304405691390090327474972089790857e-02,
       -1.291714255426679462966473962555410660387671182428076570686472e-02,
        2.947043187174764111028122319949903667638786379520519899154373e-02,
        2.648327307678167915542397563479749119673768286990136051577167e-03,
       -1.704122457360668969234196743407615179099529206118693044741086e-02,
        1.737880332720511164430027824345354801611373419264590068097416e-03,
        8.469725493560752287772961661104710791306496373354237126998903e-03,
       -2.550807127789472659145072247724735637183590942511858255354005e-03,
       -3.473798989681100630649790255076233970957721666820195620598374e-03,
        1.877120925723650133179338154344873477230567340668548016358682e-03,
        1.087053942226062966738944397844498417945523630053411148182206e-03,
       -1.000778327085680541055696707760062870925897014530348262794137e-03,
       -2.000711363076779808296301110796026470163110202848894744316755e-04,
        4.111283454742767033424740543004041500054889660665367490129376e-04,
       -2.292018041214499897382298271438084577065170236103859181134525e-05,
       -1.293044840080720609161466939678226852440475312744714379499074e-04,
        3.645026068562774967665464216602750761690984830805534178557146e-05,
        2.913344750169041218495787251929571015775436967652945386217480e-05,
       -1.657328395306616289863396387854880512976861409870690029695161e-05,
       -3.593644804025187638066915189731950450034629392522542962477168e-06,
        4.750609246452552850197117564759363194953518317428400241629683e-06,
       -3.029054592052818286474228294307141792053791695855058563299597e-07,
       -8.975701750636280734511651941681818767895052287332471537510510e-07,
        2.633898386997696553900967704111473475368019612368922599394214e-07,
        9.387197411095863026484410601284876812292554863800653292318725e-08,
       -6.286156922010786166768503252870590953166867739448102804392389e-08,
        1.076591906619196137385201975028785139607670319821266803566785e-09,
        7.768978854770062238895964639391324551611701293594055935346266e-09,
       -1.893995386171984147774611076618946011337498790609031626697228e-09,
       -3.426800863263089001811012278889864200550342566386405676893537e-10,
        2.407099453509342962399811991929330725186626582891090462239366e-10,
       -2.940589250764532582888473974638273664244682541297835986306504e-11,
       -7.832509733627817032356556582819494794884131433810848844709881e-12,
        3.152762413370310423797539876893861621418382024668704492620948e-12,
       -4.285654870068344101898185073376307686875386259541180967347399e-13,
        2.219191311588302960934661700068023727737812918006011019184982e-14
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
