/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub13 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub13( ) {

    _waveLength = 26;

    double[ ] scales = {
        9.202133538962367972970163475644184667534171916416562386009703e-03,
        8.286124387290277964432027131230466405208113332890135072514277e-02,
        3.119963221604380633960784112214049693946683528967180317160390e-01,
        6.110558511587876528211995136744180562073612676018239438526582e-01,
        5.888895704312189080710395347395333927665986382812836042235573e-01,
        8.698572617964723731023739838087494399231884076619701250882016e-02,
       -3.149729077113886329981698255932282582876888450678789025950306e-01,
       -1.245767307508152589413808336021260180792739295173634719572069e-01,
        1.794760794293398432348450072339369013581966256244133393042881e-01,
        7.294893365677716380902830610477661983325929026879873553627963e-02,
       -1.058076181879343264509667304196464849478860754801236658232360e-01,
       -2.648840647534369463963912248034785726419604844297697016264224e-02,
        5.613947710028342886214501998387331119988378792543100244737056e-02,
        2.379972254059078811465170958554208358094394612051934868475139e-03,
       -2.383142071032364903206403067757739134252922717636226274077298e-02,
        3.923941448797416243316370220815526558824746623451404043918407e-03,
        7.255589401617566194518393300502698898973529679646683695269828e-03,
       -2.761911234656862178014576266098445995350093330501818024966316e-03,
       -1.315673911892298936613835370593643376060412592653652307238124e-03,
        9.323261308672633862226517802548514100918088299801952307991569e-04,
        4.925152512628946192140957387866596210103778299388823500840094e-05,
       -1.651289885565054894616687709238000755898548214659776703347801e-04,
        3.067853757932549346649483228575476236600428217237900563128230e-05,
        1.044193057140813708170714991080596951670706436217328169641474e-05,
       -4.700416479360868325650195165061771321650383582970958556568059e-06,
        5.220035098454864691736424354843176976747052155243557001531901e-07
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
