/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub33 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub33( ) {

    _waveLength = 66;

    double[ ] scales = {
        8.186358314175091939858945975190102731733968885547217619434602e-06,
        1.791016153702791479424389068736094134247294413108336017758506e-04,
        1.822709435164084208084617771787691709255513374281497713580568e-03,
        1.139594337458160925830840619716397130445853638888472948832932e-02,
        4.861466653171619508385707681587366397164931431125053574327899e-02,
        1.481863131800528081784673514426737436792606299953305691300616e-01,
        3.267181301177075783930752787756046348844272437670999719562429e-01,
        5.093761725149396552227892926384090200953139820961482931291482e-01,
        5.112547705832674655425831875568453973369927971748064975152374e-01,
        2.095823507130554216526494469993023406452629154801126958766008e-01,
       -2.042026223985421049629055102642279430174095014493415546881477e-01,
       -3.159974107665602561905181464284910961862968513875028980451424e-01,
       -1.927833943695275915600583425408664108893845271616240406358226e-02,
        2.454206121192791114179964351253140999836791489738418857473689e-01,
        9.985155868033815698139640215477639365289384281516885362929979e-02,
       -1.714280990518593279308738113273443832545615219650436927029674e-01,
       -1.108441331167107910806084983056783194189909198734302929909672e-01,
        1.219678564037346149389134584371009777591763921148126952722200e-01,
        9.478808805061595889263191779090571160237408179346345390888721e-02,
       -9.114696835133148913093153757138373418923462847746880902676089e-02,
       -7.030248505405615921453280814171665167171986608963193275084895e-02,
        7.019114394099653254998935842432841393915841096633514680190145e-02,
        4.573456189389667743139040427641638967843459421665709740086516e-02,
       -5.347125133582228919431110824663168583260050383336359554980188e-02,
       -2.524858297747649929258392207837724793937727346177294684700378e-02,
        3.868706076024496481748675031852528047303323816250150793091832e-02,
        1.070326582001954942654534968137727769698168853186071888736311e-02,
       -2.572876175473297336123211392278301875687760837710204579628265e-02,
       -2.167758617353607324783298657172830203896433848418061622436727e-03,
        1.531695411585766548347442266431874060229304787191589430967538e-02,
       -1.594288782414604768637856446111392724059836934455189837500244e-03,
       -7.953540387057939240459305406538116220678495240302592677582773e-03,
        2.389062408165908575935815973439728988151836094753689966108405e-03,
        3.480800953405711999411461002429227385937942254778524257436278e-03,
       -1.860718214455795912074482150710567824317228203897000129729967e-03,
       -1.204309257604658876916644980097327372892008586047095719636829e-03,
        1.074380696351291355073899234941719080473877020595209197706651e-03,
        2.727305847336937211749282358350196461733595290569540045817329e-04,
       -4.908329007590351474487792254066540683724948757382104652497458e-04,
        4.393166251766185755059005296958129844094063524324718175254673e-06,
        1.780431898251245351831728023200069586928513661382622116969992e-04,
       -4.160438516273709306234368807933932360567787692918883118883736e-05,
       -4.929564423417301834310231482621574127409950921583062559483686e-05,
        2.423335398816890365621188379922041046073808819182024026589770e-05,
        9.070805757828453800203677464921508178468256685438211818575040e-06,
       -8.866121366757736169176034432364298134186929098274651022820760e-06,
       -3.607516102879771631230351118595069330196155459105589342866625e-07,
        2.288371276141527305481395545993763010565968667577768164201792e-06,
       -4.426923407952870147984002129341809185622768353983550670755106e-07,
       -3.985791291985944076942626511739220753169387460984290019185514e-07,
        1.822443332571053437467128998002798233969112236553215291639303e-07,
        3.377972703730854377516206663481869099376154259897212784144779e-08,
       -3.987838198518880722819502850814936369197384392561970319349663e-08,
        3.672863576838181340505563759379169099717712645283448779390320e-09,
        5.111211857347453839549366593998758891130921028374576213256027e-09,
       -1.671392677251932495173219614104411841891545601521784559793012e-09,
       -2.496402105246193648073519269370197331176405371538404298745013e-10,
        2.426833102305682309891302883361232297664099485514601790344279e-10,
       -3.049574453945863430361296931455141500128170151643206937547928e-11,
       -1.420236859889936792437077844940412749343225644487770840543290e-11,
        5.509414720765524548752673631197714447818740985929081064907524e-12,
       -3.343481218953278765982532722689984725170758193566174566492199e-13,
       -2.152488386833302618520603545685994753329478275805993737095214e-13,
        6.214740247174398315576214699577230693021307854673557214652751e-14,
       -7.196510545363322414033654470779070592316600780697558361083151e-15,
        3.289373678416306368625564108782095644036415401902518812978798e-16
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
