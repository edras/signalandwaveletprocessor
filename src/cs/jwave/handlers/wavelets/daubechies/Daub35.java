/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub35 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub35( ) {

    _waveLength = 70;

    double[ ] scales = {
        4.067934061148559026665247110206084571051201477121972612218005e-06,
        9.421469475576740631603027533116630224451049736050903361458759e-05,
        1.019122680375098109319314672751485080202557607467199213778085e-03,
        6.807292884319132011971333979015625113494050642797397817625326e-03,
        3.123628851149071453063391210769353068187088999495893257051179e-02,
        1.034044558614783789938787754929279183985553322796063517049140e-01,
        2.513073789944933128513251971488905042866779761014740192816902e-01,
        4.435927392240354378183910489448494594782039032807956294826105e-01,
        5.370084275091661028670690231716974547580034932361053607723887e-01,
        3.603456405180473278744458573988718422538114217890792270621563e-01,
       -4.388388187393404111343479394097224312100349011932028865098625e-02,
       -3.238228649121161212147302807993176715625480327235512530593160e-01,
       -1.817869767667278325788350264528191676841493369460849123538616e-01,
        1.660413574907809195438433327470947940538097914525298064477785e-01,
        2.172992893210892977675493456199559114036326358517672106972956e-01,
       -6.526287131067753892154895911331108284007380738865652420304233e-02,
       -1.919195892985939528760786800798636198516495957924798820500876e-01,
        1.930954466601835091947734585938109944647435243484967057775110e-02,
        1.552924803962371144206753760712566993987319378965231186477630e-01,
       -4.752680834111350445288110998030979143710864689041902167119118e-03,
       -1.205855226433935545076589480704957722635324456812322150437989e-01,
        4.734229172641948763293980314992213293971770695480616789828384e-03,
        8.991354757072954417865374195261962983644048998218233900481856e-02,
       -9.318558949903924837875002823617504227246562152671894579504378e-03,
       -6.335603744044346612098887534020545705731671718057964802006671e-02,
        1.322854958503655524455929847605110719648746890497356808289302e-02,
        4.125469306470509212749750814299126656151504805845417994651417e-02,
       -1.436683978422007182104025173214012797788904894291716373493525e-02,
       -2.416949780166026740294880681731084091264533168816746227537030e-02,
        1.276645671565674419403918018742432714973656598227939824940035e-02,
        1.228943600811871086161967625814297050611100200023898377949151e-02,
       -9.577797899235709998147309703713518608283233882793489733491642e-03,
       -5.085991649233429881797636583578921194675393807761154549733547e-03,
        6.137754586740521089596801883631921221145712545042519987641234e-03,
        1.428088794070762107355585870669842132609159040625895090070111e-03,
       -3.357644380922383229567732565298665639037348585961127075507937e-03,
        7.615969435172736546769649923895317451534703066016116257300160e-06,
        1.549637469702362975561719246539787717204438637997824935787688e-03,
       -3.346692164250854961608526121524596908041109918361306282201310e-04,
       -5.864810318991817532175809224131456738367101035694188223408841e-04,
        2.648328819961289039302810122699710966048565368047575218693134e-04,
        1.700012283661249043584690194716767771204207742625746308522935e-04,
       -1.365883072261161602559926714744746422567509177443594045709653e-04,
       -2.976995962848509743944225866488519668585242655980656646544319e-05,
        5.304143122913310222538317980686374696005605533475685587486683e-05,
       -2.437001526827789860990429478540556752694389693432668831073769e-06,
       -1.572442077270281693663288966405861215692805972737981986121447e-05,
        4.308047861716731191350493437937513220737450410132878032163179e-06,
        3.353345862871309889390877168046133657377105681618708355266688e-06,
       -1.895929617693153288493891051875444439753318548105998166574535e-06,
       -3.903931733287306166657519468494511920760767388397825775326745e-07,
        5.302368616904760917074352633915743250769600635829229600812520e-07,
       -3.700308378205124537986402644918879149894035910106489082512364e-08,
       -9.990396944534900755781728477561240762191443422318249128866740e-08,
        3.008188650719066928230268918661718274504955045022550217051301e-08,
        1.084902733789934825266560240100449884702749303326571747323086e-08,
       -7.458116552893037631192407611262788593505988638365840409367117e-09,
        5.897951310384361575470355861162022501172491937837712969865619e-11,
        1.030823345485433383811700481488557422005210168069163779730908e-09,
       -2.433545573751672936168877250405940817227367937230289801251648e-10,
       -6.407938256501889018430608323235974406219193176918284664973727e-11,
        4.000536627253744510742788201354093006471710416671002244302586e-11,
       -3.125639357108557540598098228678150768528121565391376265627294e-12,
       -2.567065476155081449204643852428401530283519685638256074752850e-12,
        8.015088533687900921948605418789324826115616416343391081288979e-13,
       -2.597954328893848084315198205094389145706680129208998638802995e-14,
       -3.397720856796267431956783825659069596940335130100871912329556e-14,
        8.624037434720089202680337663692777682810714650060805832406135e-15,
       -9.298012529324185420921555664719863501848315099116725184370339e-16,
        4.014628712333488654318569164614220308046021091178184654250982e-17
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
