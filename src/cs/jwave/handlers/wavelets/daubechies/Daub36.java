/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub36 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub36( ) {

    _waveLength = 72;

    double[ ] scales = {
        2.867925182755946334630479473029238615535511775894262711054705e-06,
        6.826028678546358691748629102209605362240344266505035981791715e-05,
        7.602151099668488285869792677106082100141275054892389379198545e-04,
        5.240297377409884366201603524392995696042174937194435235003941e-03,
        2.489056564482796484885927333959115579403023347044729739255255e-02,
        8.565209259526409083864716995521111486437594750377856524772704e-02,
        2.177569530979008149637945915719999746248969705650625533415876e-01,
        4.064336977082553467407793990250384445903151630768558142125382e-01,
        5.322668952607286914777444748641462027213554723153906901129337e-01,
        4.178753356009697863620634559374236455222275302996931178265919e-01,
        4.397519752934862993862182898358763783110745559238982179690132e-02,
       -2.944210395891145711100715969898758940722458887377844633443675e-01,
       -2.468070369781255270524798278622698446566520718230313889086016e-01,
        9.811420416311477050518401371401568038943437322299913514049728e-02,
        2.465372776089742110529709111809595434656418762898152706621356e-01,
        7.278515095792229009687682299460382878643139026668958884429641e-03,
       -1.993372056086496198603363400094784142714162256792182570541036e-01,
       -4.586140074639271639145126228774831743002971373998329604574394e-02,
        1.541062366276428841776316300420654875883842819413623395358262e-01,
        5.027618007353842862036816972809884096761706036019748316890913e-02,
       -1.188037543101356316801816931383547446073152951044444224449501e-01,
       -3.988085357551317584091699967924044034100374257075864260934102e-02,
        9.115678225801654406336059281306715151058903055370522031843771e-02,
        2.503872144956848989919484296709846860569180993040383621980546e-02,
       -6.820901663681751124880436344265538690580358108714540763125119e-02,
       -1.131910031681742794381808082173695022123056280821611354577883e-02,
        4.851308354780908538616267662315735632292989749013261207046367e-02,
        1.424972661765391603147802607378542396323429657660009755652404e-03,
       -3.198072067763969654470293513742344601172739688274251641873778e-02,
        3.984040198717004857397179486790082321314291366656151213429068e-03,
        1.906359478062535932877576164368198274858108513696832728889209e-02,
       -5.657813245058818380424016973516714570499161434975761798379020e-03,
       -9.990263473281372348001743806489172665465685056975652497503772e-03,
        5.022989106665829004699819220796538830393945994687289792465541e-03,
        4.413484835350575251918616780287775585471012556848037301025999e-03,
       -3.484541445404883311209541395428535732697661971818727286003028e-03,
       -1.503074066296643749549363655363411879858070202740814054964603e-03,
        1.990793771851737270404293245701878186600899439513475823305914e-03,
        2.776812795712026068152384207605140383490242756921936501940389e-04,
       -9.463403823261101964604918059447913047725482130063492242779878e-04,
        8.614565758992702032613879159402330909634737204578606399403107e-05,
        3.693507284967510502620040341882236687749563414433432842567511e-04,
       -1.155118895843527096848376999413102395191976350936666573818799e-04,
       -1.131899468084665671727391922924411467938450743565106978099456e-04,
        6.694741196930590257104231749283786251555566773398199990337698e-05,
        2.375106683660860777161950832380341362257503761490580896617678e-05,
       -2.731390824654337912922346414722045404779935825834384250023192e-05,
       -1.183471059985615942783182762352360917304348034947412986608322e-06,
        8.372218198160788432628056043217491552198857358432112275253310e-06,
       -1.586145782434577495502614631566211839722879492827911790709498e-06,
       -1.870811602859180713762972281154953528056257451900381097476968e-06,
        8.311421279707778528163597405935375886855029592150424544500718e-07,
        2.548423522556577831218519052844387478819866531902854523544709e-07,
       -2.455377658434232699135878286794578515387138194247693201846263e-07,
        2.753249073339512254085076456700241929492720457889076058451072e-09,
        4.799043465450992009934526867650497683545716858606119786327559e-08,
       -1.156093688817008406756913949175208452083765368825442482226093e-08,
       -5.612784343327791397474114357094368557982413895802980814813369e-09,
        3.138841695782424018351567952158415003571380699236147752239001e-09,
        1.090815553713751810964713058800448676068475673611349566405716e-10,
       -4.512545778563249634425200856088490195004077806062978067796020e-10,
        8.962418203859611987065968320295929679774693465791367610044773e-11,
        3.037429098112535221800013609576297196061786927734556635696416e-11,
       -1.599716689261357143200396922409448515398648489795044468046420e-11,
        8.876846287217374213524399682895564055949886050748321818411161e-13,
        1.070969357114017002424433471621197579059927261727846375968378e-12,
       -3.029285026974877268896134589769473854669758797446795757329862e-13,
        5.542263182639804235231685861028995158694397223907295269180336e-15,
        1.338071386299105896025578761458472955294763310766371178363783e-14,
       -3.204628543401749860439316638848579711789176444320134355253750e-15,
        3.339971984818693213132578777712503670014459411167839211495237e-16,
       -1.403274175373190617489823209168013922564353495443487431242610e-17
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
