/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub20 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub20( ) {

    _waveLength = 40;

    double[ ] scales = {
        7.799536136668463215861994818889370970510722039232863880031127e-04,
        1.054939462495039832454480973015641498231961468733236691299796e-02,
        6.342378045908151497587346582668785136406523315729666353643372e-02,
        2.199421135513970450080335972537209392121306761010882209298252e-01,
        4.726961853109016963710241465101446230757804141171727845834637e-01,
        6.104932389385938201631515660084201906858628924695448898824748e-01,
        3.615022987393310629195602665268631744967084723079677894136358e-01,
       -1.392120880114838725806970545155530518264944915437808314813582e-01,
       -3.267868004340349674031122837905370666716645587480021744425550e-01,
       -1.672708830907700757517174997304297054003744303620479394006890e-02,
        2.282910508199163229728429126648223086437547237250290835639880e-01,
        3.985024645777120219790581076522174181104027576954427684456660e-02,
       -1.554587507072679559315307870562464374359996091752285157077477e-01,
       -2.471682733861358401587992299169922262915151413349313513685587e-02,
        1.022917191744425578861013681016866083888381385233081516583444e-01,
        5.632246857307435506953246988215209861566800664402785938591145e-03,
       -6.172289962468045973318658334083283558209278762007041823250642e-02,
        5.874681811811826491300679742081997167209743446956901841959711e-03,
        3.229429953076958175885440860617219117564558605035979601073235e-02,
       -8.789324923901561348753650366700695916503030939283830968151332e-03,
       -1.381052613715192007819606423860356590496904285724730356602106e-02,
        6.721627302259456835336850521405425560520025237915708362002910e-03,
        4.420542387045790963058229526673514088808999478115581153468068e-03,
       -3.581494259609622777556169638358238375765194248623891034940330e-03,
       -8.315621728225569192482585199373230956924484221135739973390038e-04,
        1.392559619323136323905254999347967283760544147397530531142397e-03,
       -5.349759843997695051759716377213680036185796059087353172073952e-05,
       -3.851047486992176060650288501475716463266233035937022303649838e-04,
        1.015328897367029050797488785306056522529979267572003990901472e-04,
        6.774280828377729558011184406727978221295796652200819839464354e-05,
       -3.710586183394712864227221271216408416958225264980612822617745e-05,
       -4.376143862183996810373095822528607606900620592585762190542483e-06,
        7.241248287673620102843105877497181565468725757387007139555885e-06,
       -1.011994010018886150340475413756849103197395069431085005709201e-06,
       -6.847079597000556894163334787575159759109091330092963990364192e-07,
        2.633924226270001084129057791994367121555769686616747162262697e-07,
        2.014322023550512694324757845944026047904414136633776958392681e-10,
       -1.814843248299695973210605258227024081458531110762083371310917e-08,
        4.056127055551832766099146230616888024627380574113178257963252e-09,
       -2.998836489619319566407767078372705385732460052685621923178375e-10
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
