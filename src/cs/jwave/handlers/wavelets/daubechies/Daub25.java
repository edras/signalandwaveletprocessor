/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub25 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub25( ) {

    _waveLength = 50;

    double[ ] scales = {
        1.348029793470188994578489247159356055370460656508881471268611e-04,
        2.256959591854779520121391049628056149270016860666661928130747e-03,
        1.718674125404015533817186914954848902241194002444696221013131e-02,
        7.803586287213267559750659320481403668422052199257139168386084e-02,
        2.316935078860218199900621518057089104946216881512075361624214e-01,
        4.596834151460945937896973864539659944010260858049947396093277e-01,
        5.816368967460577833534892038757085635755639698734580573323031e-01,
        3.678850748029466984371319740855532278670733841012809062966976e-01,
       -9.717464096463814276130048169040892607068486428294030952842447e-02,
       -3.364730796417461309562110148848845218930261030262170601615289e-01,
       -8.758761458765466140226687673880006154266689569025041229545538e-02,
        2.245378197451017129525176510409543155930843160711989062118482e-01,
        1.181552867199598604563067876819931882639429216001523151773895e-01,
       -1.505602137505796309518094206831433270850173484773520730186277e-01,
       -9.850861528996022153725952822686729410420350758543226219234795e-02,
        1.066338050184779528831274540522414711301747903916268438037723e-01,
        6.675216449401860666895983072443984697329752470942906490126865e-02,
       -7.708411105657419356208567671699032054872853174701595359329826e-02,
       -3.717396286112250887598137324046870459877639250821705817221557e-02,
        5.361790939877949960629041419546536897037332284703545849594129e-02,
        1.554260592910229163981295854603203625062268043511894295387375e-02,
       -3.404232046065334099320628584033729153497903561399447916116575e-02,
       -3.079836794847036661636693963570288706232460663070983852354326e-03,
        1.892280447662762841086581178691039363674755753459524525886478e-02,
       -1.989425782202736494289461896386235348901617760816745484282494e-03,
       -8.860702618046368399013064252456556969199612331833605310278698e-03,
        2.726936258738495739871469244610042793734119359765762028996059e-03,
        3.322707773973191780118197357194829286271392998979276105842863e-03,
       -1.842484290203331280837780430014195744813667655929909114672154e-03,
       -8.999774237462950491085382524008429604309720852269895692000702e-04,
        8.772581936748274843488806190175921376284150686011179612908221e-04,
        1.153212440466300456460181455345639872216326644527860903202733e-04,
       -3.098800990984697989530544245356271119416614147098459162436317e-04,
        3.543714523276059005284289830559259809540337561365927850248007e-05,
        7.904640003965528255137496303166001735463107762646364003487560e-05,
       -2.733048119960041746353244004225286857636045649642652816856524e-05,
       -1.277195293199783804144903848434605690990373526086311486716394e-05,
        8.990661393062588905369930197413951232059323587543226269327396e-06,
        5.232827708153076417963912065899772684403904504491727061662335e-07,
       -1.779201332653634562565948556039009149458987774189389221295909e-06,
        3.212037518862519094895005816661093988294166712919881121802831e-07,
        1.922806790142371601278104244711267420759978799176017569693322e-07,
       -8.656941732278507163388031517930974947984281611717187862530250e-08,
       -2.611598556111770864259843089151782206922842627174274274741722e-09,
        9.279224480081372372250073354726511359667401736947170444723772e-09,
       -1.880415755062155537197782595740975189878162661203102565611681e-09,
       -2.228474910228168899314793352064795957306403503495743572518755e-10,
        1.535901570162657197021927739530721955859277615795931442682785e-10,
       -2.527625163465644811048864286169758128142169484216932624854015e-11,
        1.509692082823910867903367712096001664979004526477422347957324e-12
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
