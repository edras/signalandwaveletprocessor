/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub34 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub34( ) {

    _waveLength = 68;

    double[ ] scales = {
        5.770510632730285627466067796809329117324708919047900817738025e-06,
        1.299476200679530037833484815390569400369432658207722720405084e-04,
        1.364061390059049998200014449396877439591680435610837369411339e-03,
        8.819889403884978803182764563095879335330977939541630862804757e-03,
        3.904884135178594138905026219591569204043816577941517019631916e-02,
        1.241524821113768081954449898210969172708199672428635378051285e-01,
        2.877650592337145629334256618087718872558560120999651277991839e-01,
        4.784787462793710621468610706120519466268010329031345843336104e-01,
        5.305550996564631773133260223990794445605699030503652382795600e-01,
        2.903663295072749510455945186199530115755664977934564128822650e-01,
       -1.282468421744371672912377747048558427612774932943748628650824e-01,
       -3.315253015083869417715548463087537345035828886426345397256876e-01,
       -1.038919155156404718287260506925867970596448618647006698388596e-01,
        2.169072201874275950610018667099322465619408030256534197819784e-01,
        1.666017504122074437311574334509261366682993700573488534577890e-01,
       -1.273373582238011562843862636988693890108793629966541695807247e-01,
       -1.609249271778668063014799490429649196614628857267382976958607e-01,
        7.799184693794810738265349531832015087096882277333968473726399e-02,
        1.341259602711361284802399913977387999358280900708582462625539e-01,
       -5.448296806413904636632671383140642554265865948686157271017286e-02,
       -1.029475969928140852342073823689090498245496056845473569066667e-01,
        4.357609464963129726428486610925800727137724136370669421246609e-02,
        7.318523543679560555546221335452045680757998947493883124934567e-02,
       -3.701283841786244960356402125554190040750079009127461655784927e-02,
       -4.743855964527776247220681410983851377889756018716427358008296e-02,
        3.073974657395934459931226513844134346305562928466993208164603e-02,
        2.722835075635419610095839895805858855202745897718117731496534e-02,
       -2.367173792282636485046786438094940427456079528043555566867110e-02,
       -1.314398001665716086105827506126287041342680578404007359439612e-02,
        1.640937419986519252112261495537409592363156309874473310057471e-02,
        4.713649260999809905918876125437488856235874027077755004539205e-03,
       -1.004550670836151917439146861146431000364858401181337134891421e-02,
       -6.194748845153872839014356621835501857322345445234809347431098e-04,
        5.334950768759936032170270195983921511565539100791906952901398e-03,
       -7.692127975067836975989490900561029844887285335804349474993607e-04,
       -2.399453943537055863933124827688081952701780599883067560501870e-03,
        8.589959874363661955444898475746536583497522107459291718900058e-04,
        8.751999064078688732610570055224339733760304773327228476255647e-04,
       -5.527355762144197975516415296735124460550632283763688359649888e-04,
       -2.326732140233531635428863212833942245597361085708567528230733e-04,
        2.650772397558057819755811309071002543822145660933016957735937e-04,
        2.660050018453441903046828468025589086403126180798464347801678e-05,
       -9.914697770780134603580350758869378471802751837608461971022567e-05,
        1.353117227249649581251887376414486225127346352042209141315562e-05,
        2.844951419697807376503080001943765930601242225183893658540032e-05,
       -1.057657494257950623848316304755218120233253479317574337409622e-05,
       -5.710826510998303938275050074333400305512451419983646591762318e-06,
        4.169871758547028398316761659984928804362023643629741358799744e-06,
        4.979718101421307748081857636471761057429219265531618602960147e-07,
       -1.116306534817008428597995070751765080383261658112656948526954e-06,
        1.448195708333185127061180618150009526758658641231104901703561e-07,
        2.025990666667859216690536885693725545344933235432307649205497e-07,
       -7.526701740412589411177481797841044281662555785969415398369019e-08,
       -1.990346501531736915866180448337614967570744211158241514589121e-08,
        1.740423332936068076497051274445147160190783847854409836489662e-08,
       -8.665744261368722215864741166245385888818567571145958531936939e-10,
       -2.316501946995482751582294240136010067415084499025753117941001e-09,
        6.446378210323402313101214894500231181606520211579581132442548e-10,
        1.300410318609415248880403259300467720631189120978928377152233e-10,
       -9.904774537632409015479530333979124540183199174591377762845227e-11,
        1.004208735461769864836516428998306778031143650101842361622330e-11,
        6.080125354000167254059025929915591291115751734288584563131636e-12,
       -2.107879108915301546285370395443778864676275235126044599683271e-12,
        9.799451158211597727901178520526388692140586041163624252991805e-14,
        8.579194051799733179793112298652600511486581216528683482143106e-14,
       -2.317083703906408481078257081903089523234020423092175261925515e-14,
        2.587338381935699555813538163144986688834142571207152879144731e-15,
       -1.148944754480590128244815794312606245147888158018823490936280e-16
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
