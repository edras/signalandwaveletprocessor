/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub21 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub21( ) {

    _waveLength = 42;

    double[ ] scales = {
        5.488225098526837086776336675992521426750673054588245523834775e-04,
        7.776639052354783754338787398088799862510779059555623704879234e-03,
        4.924777153817727491399853378340056968104483161598320693657954e-02,
        1.813596254403815156260378722764624190931951510708050516519181e-01,
        4.196879449393627730946850609089266339973601543036294871772653e-01,
        6.015060949350038975629880664020955953066542593896126705346122e-01,
        4.445904519276003403643290994523601016151342743089878478478962e-01,
       -3.572291961725529045922914178005307189036762547143966578066838e-02,
       -3.356640895305295094832978867114363069987575282256098351499731e-01,
       -1.123970715684509813515004981340306901641824212464197973490295e-01,
        2.115645276808723923846781645238468659430862736248896128529373e-01,
        1.152332984396871041993434411681730428103160016594558944687967e-01,
       -1.399404249325472249247758764839776903226503657502071670245304e-01,
       -8.177594298086382887387303634193790542522570670234556157566786e-02,
        9.660039032372422070232189700372539681627783322249829842275517e-02,
        4.572340574922879239251202944731235421034828710753381191345186e-02,
       -6.497750489373232063332311106008616685748929419452249544690967e-02,
       -1.865385920211851534093244412008141266131208093007217139232170e-02,
        3.972683542785044175197464400756126818299918992482587866999707e-02,
        3.357756390338110842532604766376200760791669954106679933144723e-03,
       -2.089205367797907948785235479746212371728219866525211135343707e-02,
        2.403470920805434762380632169785689545910525667396313550679652e-03,
        8.988824381971911875349463398395464114417817949738911101372312e-03,
       -2.891334348588901247375268718015882610844675931117463495551958e-03,
       -2.958374038932831280750770228215510959830170264176955719827510e-03,
        1.716607040630624138494506282569230126333308533535502799235333e-03,
        6.394185005120302146432543767052865436099994387647359452249347e-04,
       -6.906711170821016507268939228893784790518270744313525548714065e-04,
       -3.196406277680437193708834220804640347636984901270948088339102e-05,
        1.936646504165080615323696689856004910579777568504218782029027e-04,
       -3.635520250086338309442855006186370752206331429871136596927137e-05,
       -3.499665984987447953974079490046597240276268044409625722689849e-05,
        1.535482509276049283124233498646050472096482329299719141107128e-05,
        2.790330539814487046106169582691767916283793946025922387556917e-06,
       -3.090017164545699197158555936852697325985864588418167982685400e-06,
        3.166095442367030556603889009833954440058545355777781782000278e-07,
        2.992136630464852794401294607536813682771292352506328096125857e-07,
       -1.000400879030597332045460600516621971679363965166249211063755e-07,
       -2.254014974673330131563184851456825991617915549643308754828159e-09,
        7.058033541231121859020947976903904685464512825731230495144226e-09,
       -1.471954197650365265189549600816698778213247061389470277337173e-09,
        1.038805571023706553035373138760372703492942617518816122570050e-10
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
