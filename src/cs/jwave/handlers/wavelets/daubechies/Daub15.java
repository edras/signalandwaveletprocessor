/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub15 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub15( ) {

    _waveLength = 30;

    double[ ] scales = {
        4.538537361578898881459394910211696346663671243788786997916513e-03,
        4.674339489276627189170969334843575776579151700214943513113197e-02,
        2.060238639869957315398915009476307219306138505641930902702047e-01,
        4.926317717081396236067757074029946372617221565130932402160160e-01,
        6.458131403574243581764209120106917996432608287494046181071489e-01,
        3.390025354547315276912641143835773918756769491793554669336690e-01,
       -1.932041396091454287063990534321471746304090039142863827937754e-01,
       -2.888825965669656462484125009822332981311435630435342594971292e-01,
        6.528295284877281692283107919869574882039174285596144125965101e-02,
        1.901467140071229823484893116586020517959501258174336696878156e-01,
       -3.966617655579094448384366751896200668381742820683736805449745e-02,
       -1.111209360372316933656710324674058608858623762165914120505657e-01,
        3.387714392350768620854817844433523770864744687411265369463195e-02,
        5.478055058450761268913790312581879108609415997422768564244845e-02,
       -2.576700732843996258594525754269826392203641634825340138396836e-02,
       -2.081005016969308167788483424677000162054657951364899040996166e-02,
        1.508391802783590236329274460170322736244892823305627716233968e-02,
        5.101000360407543169708860185565314724801066527344222055526631e-03,
       -6.487734560315744995181683149218690816955845639388826407928967e-03,
       -2.417564907616242811667225326300179605229946995814535223329411e-04,
        1.943323980382211541764912332541087441011424865579531401452302e-03,
       -3.734823541376169920098094213645414611387630968030256625740226e-04,
       -3.595652443624688121649620075909808858194202454084090305627480e-04,
        1.558964899205997479471658241227108816255567059625495915228603e-04,
        2.579269915531893680925862417616855912944042368767340709160119e-05,
       -2.813329626604781364755324777078478665791443876293788904267255e-05,
        3.362987181737579803124845210420177472134846655864078187186304e-06,
        1.811270407940577083768510912285841160577085925337507850590290e-06,
       -6.316882325881664421201597299517657654166137915121195510416641e-07,
        6.133359913305752029056299460289788601989190450885396512173845e-08
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
