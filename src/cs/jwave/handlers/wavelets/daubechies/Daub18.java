/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub18 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub18( ) {

    _waveLength = 36;

    double[ ] scales = {
        1.576310218440760431540744929939777747670753710991660363684429e-03,
        1.928853172414637705921391715829052419954667025288497572236714e-02,
        1.035884658224235962241910491937253596470696555220241672976224e-01,
        3.146789413370316990571998255652579931786706190489374509491307e-01,
        5.718268077666072234818589370900623419393673743130930561295324e-01,
        5.718016548886513352891119994065965025668047882818525060759395e-01,
        1.472231119699281415750977271081072312557864107355701387801677e-01,
       -2.936540407365587442479030994981150723935710729035053239661752e-01,
       -2.164809340051429711237678625668271471437937235669492408388692e-01,
        1.495339755653777893509301738913667208804816691893765610261943e-01,
        1.670813127632574045149318139950134745324205646353988083152250e-01,
       -9.233188415084628060429372558659459731431848000144569612074508e-02,
       -1.067522466598284855932200581614984861385266404624112083917702e-01,
        6.488721621190544281947577955141911463129382116634147846137149e-02,
        5.705124773853688412090768846499622260596226120431038524600676e-02,
       -4.452614190298232471556143559744653492971477891439833592755034e-02,
       -2.373321039586000103275209582665216110197519330713490233071565e-02,
        2.667070592647059029987908631672020343207895999936072813363471e-02,
        6.262167954305707485236093144497882501990325204745013190268052e-03,
       -1.305148094661200177277636447600807169755191054507571666606133e-02,
        1.186300338581174657301741592161819084544899417452317405185615e-04,
        4.943343605466738130665529516802974834299638313366477765295203e-03,
       -1.118732666992497072800658855238650182318060482584970145512687e-03,
       -1.340596298336106629517567228251583609823044524685986640323942e-03,
        6.284656829651457125619449885420838217551022796301582874349652e-04,
        2.135815619103406884039052814341926025873200325996466522543440e-04,
       -1.986485523117479485798245416362489554927797880264017876139605e-04,
       -1.535917123534724675069770335876717193700472427021513236587288e-07,
        3.741237880740038181092208138035393952304292615793985030731363e-05,
       -8.520602537446695203919254911655523022437596956226376512305917e-06,
       -3.332634478885821888782452033341036827311505907796498439829337e-06,
        1.768712983627615455876328730755375176412501359114058815453100e-06,
       -7.691632689885176146000152878539598405817397588156525116769908e-08,
       -1.176098767028231698450982356561292561347579777695396953528141e-07,
        3.068835863045174800935478294933975372450179787894574492930570e-08,
       -2.507934454948598267195173183147126731806317144868275819941403e-09
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
