/**
 * JWave - Java implementation of wavelet transform algorithms
 *
 * Copyright 2010 Christian Scheiblich
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * This file Daub38.java is part of JWave.
 *
 * @author itechsch
 * date 19.10.2010 15:24:26
 * contact source@linux23.de
 */
package cs.jwave.handlers.wavelets.daubechies;

import cs.jwave.handlers.wavelets.Wavelet;

/**
 * Ingrid Daubechies orthonormalized wavelet using XX coefficients.
 * 
 * @date 29.04.2011 21:53:00
 * @author Edras Pacola
 */
public class Daub23 extends Wavelet {

  /**
   * Ingrid Daubechies orthonormalized wavelet using XX coefficients. 
   * 
   * @date 29.04.2011 21:53:00
   * @author Edras Pacola
   */
  public Daub23( ) {

    _waveLength = 46;

    double[ ] scales = {
        2.719041941282888414192673609703302357098336003920923958924757e-04,
        4.202748893183833538390034372523511472345215563611003407984701e-03,
        2.931000365788411514736204018929480427874317460676079959515131e-02,
        1.205155317839719336306053895611899089004274336891709067958035e-01,
        3.184508138528652363416527748460472152790575031409830417259640e-01,
        5.449311478735204282674240672421984387504149924834544495466793e-01,
        5.510185172419193913452724227212507720514144116478727269717859e-01,
        1.813926253638400136259098302138614937264260737638175539416540e-01,
       -2.613921480306441118856795735210118413900307577511142987337375e-01,
       -2.714020986078430556604069575184718123763697177381058877113471e-01,
        9.212540708241805260646030910734894258577648089100630012130261e-02,
        2.235736582420402317149513960822561717689875252792817094811874e-01,
       -3.303744709428937875006612792463031409461636228731285046551636e-02,
       -1.640113215318759250156057837165276039181451149292112929401186e-01,
        2.028307457564929974897286607551313323418860610791382310375731e-02,
        1.122970436181072886950734465075645977754665593869789965874572e-01,
       -2.112621235622724100704783293549467048999443844657058425212982e-02,
       -7.020739157490110946204219011957565343899895499962369353294028e-02,
        2.176585683449997560776882472168730165799461445156766923497545e-02,
        3.849533252256919901057154320407596073180564628069920893870768e-02,
       -1.852351365015615979794689960740674782817814176166333519597796e-02,
       -1.753710100303584537915846117408613551147985251726558719415169e-02,
        1.275194393152828646243157404474947115052750581861997731041018e-02,
        6.031840650024162816289878206037841640814102314209075233751820e-03,
       -7.075319273706152814194039481466556204493276773483821748740018e-03,
       -1.134865473356251691289337120013286756337393784110786907825400e-03,
        3.122876449818144997419144765125750522437659393621577492535411e-03,
       -2.465014005163512031940473100375377210862560761576109755841161e-04,
       -1.061231228886651321139357625683805642193648671030425010215075e-03,
        3.194204927099011503676530359692366990929679170022583007683112e-04,
        2.567624520078737205563856675376636092314813400664190770435450e-04,
       -1.500218503490340967673163290447832236259277810659068637402668e-04,
       -3.378894834120903434270962452674534330903724108906662510305045e-05,
        4.426071203109246077621875303440935335701832843654692827539837e-05,
       -2.635207889249186237209225933170897825432335273771458456888097e-06,
       -8.347875567854625544366043748844183086765894974439245409223337e-06,
        2.397569546840240057403739507525641239509517148980849889986407e-06,
        8.147574834779447778085443041422881439860288287528356019216814e-07,
       -5.339005405209421154584783682848780965053642859373536945701365e-07,
        1.853091785633965019353699857864654181728710556702529908304185e-08,
        5.417549179539278736503176166323685597634496102979977037271945e-08,
       -1.399935495437998845130909687361847103274208993447892120341999e-08,
       -9.472885901812050535221582074673490573092096712822067564903012e-10,
        1.050446453696543404071105111096438573423068913105255997908040e-09,
       -1.932405111313417542192651899622541612314066389643607507706887e-10,
        1.250203302351040941433216718217504240541423430995137507404787e-11
    };

    _scales = new double[ _waveLength ];

    for( int i = 0; i < _waveLength; i++ )
      _scales[ i ] = scales[ i ];

    _coeffs = new double[ _waveLength ]; 

    for( int i = 0; i < _waveLength; i++ )
      if( ( i % 2 ) == 0 ) {
        _coeffs[ i ] = _scales[ ( _waveLength - 1 ) - i ];
      } else {
        _coeffs[ i ] = -_scales[ ( _waveLength - 1 ) - i ];
      } // if

  } // Daub08

} // class
